function streebog(massage, hexSize) {

    function toBin(str) {
      let result = "";
      for (let i = 0; i < str.length; i++) {
        result += str.charCodeAt(i).toString(2).padStart(8, "0");
      }
    return result;
    }
  
    function toTen(str) {
      let result = 0;
      for (let i = 0; i < str.length; i++) {
        result += +str[i] * 2**(str.length - 1 - i);
      }
      return result;
    }
  
    function toHexFromBin(value) {
      let result = "";
      let hex;
      for (let i = 0; i < value.length; i +=4) {
        hex = 0;
        for (let j = 3; j > -1; j--){
          hex += +value[i + (3-j)] * 2**j;
        }
        result += hex.toString(16);
      }
      return result;
    }
  
    function xor(x, y) {
      let result = "";
      for (let i = 0; i < x.length; i++) {
        result += (+x[i] + +y[i]) % 2;
      }
      return result;
    }
  
    function xorRew(x, y) {
      let result = "";
      for (let i = 0; i < x.length; i++) {
        result += (+x[i] + +y[y.length - 1 - i]) % 2;
      }
      return result;
    }
  
    function add(x, y) {
      let result = "";
      let per = 0;
      for (let i = x.length - 1; i > -1; i--) {
        result = (+x[i] + +y[i] + per) % 2 + result;
        per = parseInt((+x[i] + +y[i] + per) / 2) % 2;
      }
      return result;
    }
  
    function S(str) {
      let result = "";
      for (let i = 0; i < str.length; i += 8) {
          result += Pi[toTen(str.slice(i, i + 8))];
      }
      return result;
    }
  
    function P(str) {
      let result = "";
      for (let i = 0; i < Tau.length; i++) {
        result += str.slice(Tau[i] * 8, (Tau[i] + 1) * 8);
      }
      return result;
    }
  
    function L(str) {
      let result = "";
      let temp;
      let zero = "".padStart(64, "0");
      for (let i = 0; i < str.length; i += 64) {
        temp = zero;
        for (let j = 0; j < 64; j++) {
          if (str[i + j] === "1") {
            temp = xor(temp, A[j]);
          } 
        }
        result += temp;
      }
      return result;
    }
  
    function KeySchedule(K, i) {
      K = xor(K, C[i]);
      K = S(K);
      K = P(K);
      K = L(K);
      return K;
    }
  
    function E(K, m) {
      let state = xor(K, m);
      for (let i = 0; i < C.length; i++) {
        state = S(state);
        state = P(state);
        state = L(state);
        K = KeySchedule(K, i);
        state = xor(state, K);
      }
      return state;
    }
  
    function g(N, m, h) {
      let K = xor(h, N);
      K = S(K);
      K = P(K);
      K = L(K);
      let t = E(K, m);
      t = xor(h, t);
      G = xor(t, m);
      return G;
    }
  
    let Tau = [
          0, 8, 16, 24, 32, 40, 48, 56,
          1, 9, 17, 25, 33, 41, 49, 57,
          2, 10, 18, 26, 34, 42, 50, 58,
          3, 11, 19, 27, 35, 43, 51, 59,
          4, 12, 20, 28, 36, 44, 52, 60,
          5, 13, 21, 29, 37, 45, 53, 61,
          6, 14, 22, 30, 38, 46, 54, 62,
          7, 15, 23, 31, 39, 47, 55, 63
    ];
  
    let Pi = [
      "11111100", "11101110", "11011101", "00010001", "11001111", "01101110", 
      "00110001", "00010110", "11111011", "11000100", "11111010", "11011010", 
      "00100011", "11000101", "00000100", "01001101", "11101001", "01110111", 
      "11110000", "11011011", "10010011", "00101110", "10011001", "10111010", 
      "00010111", "00110110", "11110001", "10111011", "00010100", "11001101", 
      "01011111", "11000001", "11111001", "00011000", "01100101", "01011010", 
      "11100010", "01011100", "11101111", "00100001", "10000001", "00011100", 
      "00111100", "01000010", "10001011", "00000001", "10001110", "01001111", 
      "00000101", "10000100", "00000010", "10101110", "11100011", "01101010", 
      "10001111", "10100000", "00000110", "00001011", "11101101", "10011000", 
      "01111111", "11010100", "11010011", "00011111", "11101011", "00110100", 
      "00101100", "01010001", "11101010", "11001000", "01001000", "10101011", 
      "11110010", "00101010", "01101000", "10100010", "11111101", "00111010", 
      "11001110", "11001100", "10110101", "01110000", "00001110", "01010110", 
      "00001000", "00001100", "01110110", "00010010", "10111111", "01110010", 
      "00010011", "01000111", "10011100", "10110111", "01011101", "10000111", 
      "00010101", "10100001", "10010110", "00101001", "00010000", "01111011", 
      "10011010", "11000111", "11110011", "10010001", "01111000", "01101111", 
      "10011101", "10011110", "10110010", "10110001", "00110010", "01110101", 
      "00011001", "00111101", "11111111", "00110101", "10001010", "01111110", 
      "01101101", "01010100", "11000110", "10000000", "11000011", "10111101", 
      "00001101", "01010111", "11011111", "11110101", "00100100", "10101001", 
      "00111110", "10101000", "01000011", "11001001", "11010111", "01111001", 
      "11010110", "11110110", "01111100", "00100010", "10111001", "00000011", 
      "11100000", "00001111", "11101100", "11011110", "01111010", "10010100", 
      "10110000", "10111100", "11011100", "11101000", "00101000", "01010000", 
      "01001110", "00110011", "00001010", "01001010", "10100111", "10010111", 
      "01100000", "01110011", "00011110", "00000000", "01100010", "01000100", 
      "00011010", "10111000", "00111000", "10000010", "01100100", "10011111", 
      "00100110", "01000001", "10101101", "01000101", "01000110", "10010010", 
      "00100111", "01011110", "01010101", "00101111", "10001100", "10100011", 
      "10100101", "01111101", "01101001", "11010101", "10010101", "00111011", 
      "00000111", "01011000", "10110011", "01000000", "10000110", "10101100", 
      "00011101", "11110111", "00110000", "00110111", "01101011", "11100100", 
      "10001000", "11011001", "11100111", "10001001", "11100001", "00011011", 
      "10000011", "01001001", "01001100", "00111111", "11111000", "11111110", 
      "10001101", "01010011", "10101010", "10010000", "11001010", "11011000", 
      "10000101", "01100001", "00100000", "01110001", "01100111", "10100100", 
      "00101101", "00101011", "00001001", "01011011", "11001011", "10011011", 
      "00100101", "11010000", "10111110", "11100101", "01101100", "01010010", 
      "01011001", "10100110", "01110100", "11010010", "11100110", "11110100", 
      "10110100", "11000000", "11010001", "01100110", "10101111", "11000010", 
      "00111001", "01001011", "01100011", "10110110"
    ];
  
    let A = [
    "1000111000100000111110101010011100101011101000001011010001110000",
    "0100011100010000011111011101110110011011010100000101101000111000",
    "1010110100001000101100001110000011000011001010000010110100011100",
    "1101100000000100010110000111000011101111000101001001100000001110",
    "0110110000000010001011000011100011111001000010100100110000000111",
    "0011011000000001000101100001110011110010000001010010011010001101",
    "0001101110001110000010110000111001111001100011000001001111001000",
    "1000001101000111100010110000011110110010010001101000011101100100",
    "1010000000010001110100111000000010000001100011101000111101000000",
    "0101000010000110111001110100000011001110010001111100100100100000",
    "0010100001000011111111010010000001100111101011011110101000010000",
    "0001010010101111111100000001000010111101110110000111010100001000",
    "0000101011011001011110000000100011010000011011001011010000000100",
    "0000010111100010001111000000010001101000001101100101101000000010",
    "1000110001110001000111100000001000110100000110110010110100000001",
    "0100011010110110000011110000000100011010100000111001100010001110",
    "1001000011011010101101010010101000111000011110101110011101101111",
    "0100100001101101110101000001010100011100001111011111110110111001",
    "0010010010111000011010101000010000001110100100001111000011010010",
    "0001001001011100001101010100001000000111010010000111100001101001",
    "0000100100101110100101000010000110001101001001000011110010111010",
    "1000101000010111010010101001111011001000000100100001111001011101",
    "0100010110000101001001010100111101100100000010010000111110100000",
    "1010110011001100100111001010100100110010100010101000100101010000",
    "1001110101001101111100000101110101011111011001100001010001010001",
    "1100000010101000011110001010000010100001001100110000101010100110",
    "0110000001010100001111000101000011011110100101110000010101010011",
    "0011000000101010000111100010100001101111110001011000110010100111",
    "0001100000010101000011110001010010111001111011000100011011011101",
    "0000110010000100100010010000101011010010011101100010001111100000",
    "0000011001000010110010100000010101101001001110111001111101110000",
    "0000001100100001011001011000110010111010100100111100000100111000",
    "1000011000100111010111011111000010011100111010001010101010101000",
    "0100001110011101101000000111100001001110011101000101010101010100",
    "1010111111000000010100000011110000100111001110101010010000101010",
    "1101100101100000001010000001111010011101000111010101001000010101",
    "1110001000110000000101000000111111000000100000000010100110000100",
    "0111000100011000000010101000100101100000010000001001101001000010",
    "1011011000001100000001011100101000110000001000000100110100100001",
    "0101101100000110100011000110010100011000000100001010100010011110",
    "0100010101101100001101001000100001111010001110000000010110111001",
    "1010110000110110000110100100010000111101000111001000110011010010",
    "0101011000011011000011010010001010010000000011100100011001101001",
    "0010101110000011100010000001000101001000000001110010001110111010",
    "1001101111001111010001001000011000100100100011011001111101011101",
    "1100001111101001001000100100001100010010110010001100000110100000",
    "1110111111111010000100011010111100001001011001001110111001010000",
    "1111100101111101100001101101100110001010001100100111011100101000",
    "1110010011111010001000000101010010101000000010110011001010011100",
    "0111001001111101000100000010101001010100100010110001100101001110",
    "0011100110110000000010000001010100101010110010111000001000100111",
    "1001001001011000000001001000010000010101111010110100000110011101",
    "0100100100101100000000100100001010000100111110111010111011000000",
    "1010101000010110000000010010000101000010111100110101011101100000",
    "0101010100001011100011101001111000100001111101111010010100110000",
    "1010010010001011010001110100111110011110111101011101110000011000",
    "0111000010100110101001010110111000100100010000000101100110001110",
    "0011100001010011110111000011011100010010001000001010001001000111",
    "0001110010100111011011101001010100001001000100000101000110101101",
    "0000111011011101001101111100010010001010000010001010011011011000",
    "0000011111100000100101010110001001000101000001000101001101101100",
    "1000110101110000110001000011000110101100000000101010011100110110",
    "1100100000111000011000101001011001010110000000011101110100011011",
    "0110010000011100001100010100101100101011100011101110000010000011"
    ];
  
    let C = [
      "10110001000010000101101111011010000111101100101011011010111010011110101111001011001011111000000111000000011001010111110000011111001011110110101001110110010000110010111001000101110100000001011001110001010011101011100010001101011101011000010111000100111111000100101101111100111000001001000110010010011001110110100100000001101000100100001000101010000010001010010001100000110100110001010100000101011101100111010000110110110011000111010001001101001000111101110110000000011001010101100111110010101001100100010100000111",








      "10101011101111101101111010100110100000000000010101101111010100100011100000101010111001010100100010110010111001001111001111110011100010010100000111100111000111001111111110001010011110001101101100011111111111111110000110001010000110110011001101100001000000111001111111100111011001110000001010101111011010010011001101001011011110100001111001101100001100000011101101110110010100101111010000110110100110001111101011010001000101010011101110110110110000110111010010110100110001111111101110011000010001011001110011101101", 


    ];
  
    massage = toBin(massage);
    let length = massage.length;
    massage = 1 +  massage 
    while (massage.length % 512 != 0) {
      massage = 0 + massage;
    }
  
    let N, Sig, h;
    N = Sig = "".padStart(512, "0");
    if (hexSize === 256) {
      h = "00000001"
      while (h.length < 512) {
       h += h;
     }
    }
    else {
      h = N;
    }
    let v_512 = "1000000000".padStart(512, "0");
  
    let words = [];
    for (let i = massage.length - 1; i > -1; i -= 512) {
      words.push(massage.slice(i - 511, i + 1));
    }
  
    for (word of words) {
      if (length > 512) {
        h = g(N, word, h);
        N = add(N, v_512);
        Sig = add(Sig, word);
      }
      else {
        h = g(N, word, h);
        N = add(N, length.toString(2).padStart(512, "0"));
        Sig = add(Sig, word);
        h = g("".padStart(512, "0"), N, h);
        h = g("".padStart(512, "0"), Sig, h);
        if (hexSize === 256) {
          return toHexFromBin(h).slice(0, 64);
        }
        else {
          return toHexFromBin(h);
        }
      }
      length -= 512;
    }
  };
  
  